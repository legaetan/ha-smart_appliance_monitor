---
alwaysApply: true
---

# Smart Appliance Monitor - Cursor Rules

## Project Overview

This is a **Home Assistant custom integration** for monitoring appliances using smart plugs with power monitoring capabilities. The integration automatically detects and tracks appliance cycles (washing machines, dishwashers, dryers, etc.) and provides comprehensive statistics, notifications, energy management features, and AI-powered analysis.

**Current Version**: v0.7.4
**Type**: Python integration using Home Assistant framework
**License**: MIT
**Target**: Home Assistant 2023.x+

**Key Features**:
- Automatic cycle detection with configurable thresholds
- AI-powered analysis via Home Assistant AI Tasks (OpenAI, Claude, Ollama)
- Energy Dashboard integration
- Comprehensive statistics with persistence
- Multi-service notifications (Telegram, Mobile App, etc.)
- Data export (CSV/JSON)
- Anomaly detection
- Auto-shutdown and scheduling capabilities

## Language Rules

### Documentation Language
- **All documentation MUST be in English**:
  - README.md
  - CHANGELOG.md
  - Wiki files (docs/wiki-github/)
  - Release notes (RELEASE_NOTES_*.md)
  - Technical documentation (docs/)
  - Code comments and docstrings

### User Interface Language
- **English as primary language** in `strings.json`
- **French translations** in `translations/fr.json`
- Configuration flows support both English and French via translation system
- Never hardcode French text in Python code - always use translation keys

## Home Assistant Server Connection

The project uses a `.ha_config` file (gitignored) to store connection settings for interacting with the Home Assistant server. The user creates this file from `.ha_config.example` template with their actual credentials.

### Connection Methods

**API Connection (HA_URL + HA_TOKEN):**
- Used for restarting Home Assistant via REST API
- Command: `source .ha_config && curl -X POST -H "Authorization: Bearer $HA_TOKEN" -H "Content-Type: application/json" "$HA_URL/api/services/homeassistant/restart"`
- Required for automated testing workflow

**SSH Connection (HA_SSH_USER + HA_SSH_HOST + HA_SSH_ID_RSA):**
- Used for file synchronization with rsync/scp
- Example rsync command:
  ```bash
  source .ha_config && rsync -avz --exclude='www/' \
    -e "ssh -i $HA_SSH_ID_RSA" \
    custom_components/smart_appliance_monitor/ \
    $HA_SSH_USER@$HA_SSH_HOST:/config/custom_components/smart_appliance_monitor/
  ```
- Alternative: Use Syncthing or other sync methods (no SSH config needed)

### Usage in Workflows

The `.ha_config` file is sourced in testing and release workflows:
- Pre-release testing: Restart HA after manual sync
- Automated commands: Load variables with `source .ha_config`
- Scripts can access `$HA_URL`, `$HA_TOKEN`, `$HA_SSH_*` environment variables

## Release Workflow

### Pre-Release Testing Procedure

**When user requests a release, ALWAYS ask:**

1. **"Veux-tu tester les modifications avant la release ?"**
   
   **Si OUI:**
   - **Manual sync required:**
     - Copy files from your development workspace to HA server
     - Source: `custom_components/smart_appliance_monitor/`
     - Destination on HA: `/config/custom_components/smart_appliance_monitor/`
     - Method: Use your preferred sync method (Syncthing, rsync, scp, etc.)
     - **Tip**: You may want to exclude the `www/` directory if frontend files are unchanged (large files, slower sync)
   - Ask: "**Veux-tu que je redémarre Home Assistant maintenant ?**"
     - If confirmed: `source .ha_config && curl -X POST -H "Authorization: Bearer $HA_TOKEN" -H "Content-Type: application/json" "$HA_URL/api/services/homeassistant/restart"`
   - **WAIT for user to test manually**
   - Ask: **"Tests terminés ? Veux-tu continuer avec la release ou faire des modifications ?"**
     - If "continuer" → Proceed to Step 1
     - If "modifications" → Return to development

   **Si NON:**
   - Proceed directly to Step 1

### Step 1: Update Version and Documentation

1. Update version number in these files:
   - `version` (single line with version number)
   - `custom_components/smart_appliance_monitor/manifest.json` (version field)

2. Update `CHANGELOG.md`:
   - Add new version section at the top with format: `## [X.Y.Z] - YYYY-MM-DD`
   - Document all changes under categories: Added, Changed, Fixed, etc.
   - Include technical details, file modifications, and breaking changes

3. Update `README.md`:
   - Update "Recent Improvements" section if adding major features
   - Update feature lists if applicable
   - Keep version references current

4. Update Wiki files if needed:
   - `docs/wiki-github/Home.md` - Update version number and "What's New" section
   - `docs/wiki-github/Features.md` - Document new entities or features
   - Commit and push wiki changes FIRST (it's a submodule)

### Step 2: Commit and Tag

1. Stage all changes:
   ```bash
   git add version custom_components/smart_appliance_monitor/manifest.json CHANGELOG.md README.md docs/wiki-github
   ```

2. Commit with conventional format:
   ```bash
   git commit -m "Release vX.Y.Z - [Feature Name]

   - Brief description of main changes
   - Key features or fixes
   - Important notes"
   ```

3. Create annotated tag:
   ```bash
   git tag -a vX.Y.Z -m "Release vX.Y.Z - [Title]

   Key Features:
   - Feature 1
   - Feature 2

   Bug Fixes:
   - Fix 1
   - Fix 2

   Download: smart_appliance_monitor-vX.Y.Z.zip
   SHA256: [will be added after creation]"
   ```

4. Push commits and tags:
   ```bash
   git push && git push --tags
   ```

### Step 3: Create Release Notes and GitHub Release

1. Create release notes file `docs/release_notes/RELEASE_NOTES_vX.Y.Z.md`:
   - Write in English
   - Include: overview, key features, installation instructions, bug fixes, examples
   - Keep it user-friendly and comprehensive
   - Reference full changelog and other documentation
   - This file is PERMANENT and should be committed to the repository

2. Update `docs/release_notes/README.md`:
   - Add new version entry at the top
   - Update "Latest version" at the bottom
   - Commit this update with the release

3. Create GitHub release using GitHub CLI:
   ```bash
   gh release create vX.Y.Z \
     --title "vX.Y.Z - [Feature Name]" \
     --notes-file docs/release_notes/RELEASE_NOTES_vX.Y.Z.md \
     --latest
   ```
   
   Note: No need to create ZIP manually - GitHub automatically creates source archives

### Step 4: Final Documentation Commit

1. Add and commit release notes:
   ```bash
   git add -f docs/release_notes/RELEASE_NOTES_vX.Y.Z.md docs/release_notes/README.md
   git commit -m "docs: Add release notes for vX.Y.Z"
   git push origin main
   ```

2. Keep release notes in `docs/release_notes/` - they are permanent documentation
3. Repository contains complete release history in the release_notes folder

Note: Release notes files may be gitignored, use `-f` flag to force add them

## Project Structure

### Directory Layout
```
ha-smart_appliance_monitor/
├── custom_components/
│   └── smart_appliance_monitor/     # Integration code
│       ├── __init__.py
│       ├── manifest.json
│       ├── coordinator.py           # Data coordinator with persistence
│       ├── config_flow.py           # Configuration UI
│       ├── sensor.py                # Sensor entities
│       ├── binary_sensor.py         # Binary sensor entities
│       ├── switch.py                # Switch entities
│       ├── button.py                # Button entities
│       ├── state_machine.py         # Cycle detection logic
│       ├── notify.py                # Notification system
│       ├── export.py                # Data export (CSV/JSON)
│       ├── energy.py                # Energy dashboard helper
│       ├── energy_dashboard.py      # Advanced energy analytics
│       ├── energy_storage.py        # .storage/energy file reader
│       ├── ai_client.py             # AI analysis via HA AI Tasks
│       ├── storage_config.py        # Global AI configuration
│       ├── dashboards/              # Dashboard templates
│       ├── translations/
│       │   └── fr.json              # French translations
│       └── strings.json             # English strings
├── tests/                           # Unit tests
├── docs/                            # Technical documentation
│   ├── dev/                         # Development guides (gitignored, temporary)
│   ├── wiki-github/                 # User wiki (submodule)
│   ├── release_notes/               # Release notes (permanent)
│   │   ├── README.md                # Index of all releases
│   │   └── RELEASE_NOTES_vX.Y.Z.md  # Individual release notes
│   ├── TESTING_AI.md                # AI features testing guide
│   └── PERSISTENCE.md               # Technical docs
├── CHANGELOG.md                     # Version history
├── README.md                        # Main documentation
├── version                          # Version number
└── .cursor/                         # Cursor IDE configuration
    └── rules/                       # AI assistant rules
        └── project.mdc              # This file
```

### File Naming Conventions

**Permanent files:**
- Python modules: lowercase with underscores (e.g., `state_machine.py`)
- Documentation: UPPERCASE.md (e.g., `README.md`, `CHANGELOG.md`)
- Version file: `version` (no extension)
- Release notes: `docs/release_notes/RELEASE_NOTES_vX.Y.Z.md` (PERMANENT - committed)
- Testing guides: `docs/TESTING_*.md`

**Temporary files (gitignored):**
- Archives: `smart_appliance_monitor-vX.Y.Z.zip`
- Development notes: `notes.md`, `todo.md`, etc.
- Development guides: `docs/dev/` directory (see below)

## Git Commit Message Format

Use conventional commits format:

- `Release vX.Y.Z - [Feature Name]` - Version releases
- `feat: Add feature description` - New features
- `fix: Fix bug description` - Bug fixes
- `docs: Update documentation` - Documentation changes
- `chore: Maintenance task` - Chores (cleanup, dependencies)
- `test: Add or update tests` - Test changes
- `refactor: Code refactoring` - Code restructuring

## Code Style

### Python
- Follow Home Assistant coding standards
- Use type hints for all function parameters and return values
- Document classes and public methods with docstrings
- Keep functions focused and under 50 lines when possible
- Use async/await for I/O operations

### Imports
```python
"""Module docstring."""
from __future__ import annotations

# Standard library
from datetime import datetime
from typing import Any

# Third-party
from homeassistant.core import HomeAssistant

# Local
from .const import DOMAIN
```

## Important Rules

### Development Guides
When working on complex features or implementations, you can create temporary development guides to track progress, document decisions, and organize implementation steps:

**Purpose:**
- Track implementation progress during development
- Document technical decisions and corrections applied
- Create detailed summaries of complex changes
- Serve as reference during development sessions

**Location:**
- **MUST be in `docs/dev/` directory** (gitignored)
- Examples: 
  - `docs/dev/DASHBOARD_IMPLEMENTATION.md`
  - `docs/dev/FEATURE_XYZ_PROGRESS.md`
  - `docs/dev/CORRECTIONS_APPLIED.md`

**Guidelines:**
- These guides are **TEMPORARY** working documents
- They are **NOT committed to git**
- After feature completion, extract relevant information and add it to:
  - Official documentation (`docs/*.md`)
  - Wiki (`docs/wiki-github/`)
  - Release notes (`docs/release_notes/`)
  - CHANGELOG.md
- Then delete the temporary guide or leave it for historical reference

**Never:**
- ❌ Create development guides in project root (e.g., `DASHBOARD_*.md` in `/`)
- ❌ Commit temporary development guides to git
- ❌ Use these guides as permanent documentation

**Cleanup:**
- Before release, ensure all temporary guides are either:
  - Moved to `docs/dev/` (if keeping for reference)
  - Deleted (if no longer needed)
  - Or their content integrated into permanent docs

### Never Commit
- ZIP archives (`smart_appliance_monitor-*.zip`)
- Python cache files (`__pycache__/`, `*.pyc`)
- IDE files (`.vscode/`, `.idea/`)
- Temporary development notes (`notes.md`, `todo.md`, etc.)
- Development test files in project root (`TEST_*.md`, `*_updated.md`, `*_draft.md`, etc.)
- Development guides in project root (e.g., `DASHBOARD_*.md`, `IMPLEMENTATION_*.md` in `/`)
- **Exception**: Development guides in `docs/dev/` are gitignored but can be kept locally

### Cleanup Before Release
Before creating a release, clean up temporary development files from the project root:
- Remove duplicate/updated versions of documentation (e.g., `README_updated.md`)
- Remove test guides in root if they exist in proper location (e.g., `TEST_CYCLE_HISTORY.md` should only be in `docs/`)
- Move or delete development guides from project root (e.g., `DASHBOARD_*.md`, `IMPLEMENTATION_*.md`)
- Ensure `docs/dev/` directory is gitignored and not staged
- Keep only one version of each document in its proper location
- Command to find temp files: `find . -maxdepth 1 \( -name "*_updated.md" -o -name "TEST_*.md" -o -name "*_draft.md" -o -name "DASHBOARD_*.md" -o -name "IMPLEMENTATION_*.md" \)`

### Always Remember
- Wiki is a submodule - commit and push wiki changes separately FIRST
- Release notes must be in English before publishing
- Test persistence features after coordinator modifications
- Update both English strings and French translations for UI changes
- Version number must match in: `version`, `manifest.json`, and git tag
- **Validate energy calculations**: Negative values indicate sensor resets - add validation
- **Test AI analysis**: Ensure prompts return structured Markdown responses
- **Check coordinator matching**: Appliance names with underscores need proper slug handling

### Testing

**Manual Testing Procedure:**
1. **Sync to HA server:**
   - Copy files from development workspace to HA server
   - Source: `custom_components/smart_appliance_monitor/`
   - Destination on HA: `/config/custom_components/smart_appliance_monitor/`
   - Method: Use your preferred sync method (Syncthing, rsync via SSH, scp, etc.)
   - **Note**: You may exclude `www/` directory if frontend unchanged (large files)
   
2. **Restart Home Assistant:** 
   - `source .ha_config && curl -X POST -H "Authorization: Bearer $HA_TOKEN" -H "Content-Type: application/json" "$HA_URL/api/services/homeassistant/restart"` (only if user confirms)
   
3. User tests manually on their HA instance

4. Wait for user confirmation before proceeding with release

**Automated Testing:**
- Run tests before committing: `pytest tests/`
- Test on a real Home Assistant instance when possible
- Verify persistence after restart for cycle-related changes
- Check that notifications work for all configured services
- **Test AI analysis with actual appliances**: Verify recommendations and insights are not empty
- **Test with sensor resets**: Ensure negative energy values are detected and handled
- **Test state restoration**: Verify corrupted data is auto-corrected on load

## Release Checklist

**Interactive Release Process:**

When user requests a release, follow this conversational flow:

1. **Ask**: "Veux-tu tester les modifications avant la release ?"
   - If YES: Sync to HA server, ask about restart, WAIT for user testing
   - If NO: Skip to version update

2. **Ask**: "Tests terminés ? Veux-tu continuer avec la release ou faire des modifications ?"
   - If "continuer": Proceed with release steps
   - If "modifications": Return to development

3. **Execute release steps** (only after user confirmation):
   - [ ] Version updated in `version` and `manifest.json`
   - [ ] CHANGELOG.md updated with all changes
   - [ ] README.md updated if needed
   - [ ] Release notes created in `docs/release_notes/RELEASE_NOTES_vX.Y.Z.md`
   - [ ] Release notes index updated in `docs/release_notes/README.md`
   - [ ] Wiki updated if needed (and changes committed/pushed)
   - [ ] All tests passing
   - [ ] No linter errors
   - [ ] All documentation in English (release notes, README, code comments)
   - [ ] French translations updated if UI changed
   - [ ] Testing guides created/updated for new features (e.g., `docs/TESTING_*.md`)
   - [ ] Commit, tag, and push to GitHub
   - [ ] Create GitHub release with `gh release create`

**IMPORTANT**: Never proceed with release without explicit user confirmation at each step

## Questions?

For more details:
- Architecture: See `ARCHITECTURE.md` (if exists)
- Contributing: See `CONTRIBUTING.md` (if exists)
- Wiki: https://github.com/legaetan/ha-smart_appliance_monitor/wiki
